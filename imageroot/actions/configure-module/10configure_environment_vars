#!/usr/bin/env python3

# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later

import json
import sys
import agent
import secrets
import base64
import os

# Parse JSON input
data = json.load(sys.stdin)

# ------------------------------------------------------------
# 1. Core application settings (always required)
# ------------------------------------------------------------
SEMAPHORE_ADMIN_PASSWORD = data.get("SEMAPHORE_ADMIN_PASSWORD", "password")
SEMAPHORE_ADMIN_NAME     = data.get("SEMAPHORE_ADMIN_NAME",     "admin")
SEMAPHORE_ADMIN_EMAIL    = data.get("SEMAPHORE_ADMIN_EMAIL",    "admin@admin.com")
SEMAPHORE_ADMIN          = data.get("SEMAPHORE_ADMIN",          "admin")

# ------------------------------------------------------------
# 2. Reverse-proxy / TLS settings (NEW)
# ------------------------------------------------------------
host             = data.get("host", "")
lets_encrypt     = data.get("lets_encrypt", False)
http2https       = data.get("http2https", True)

agent.set_env("TRAEFIK_HOST", host)
agent.set_env("TRAEFIK_LETS_ENCRYPT", "True" if lets_encrypt else "False")
agent.set_env("TRAEFIK_HTTP2HTTPS",   "True" if http2https   else "False")

# ------------------------------------------------------------
# 3. SMTP via SmartHost (unchanged)
# ------------------------------------------------------------
rdb = agent.redis_connect(use_replica=True)
smtp = agent.get_smarthost_settings(rdb)

MAIL_FROM_NAME = f"SEMAPHORE <{smtp['username']}>"

# ------------------------------------------------------------
# 4. Optional notification channels (unchanged)
# ------------------------------------------------------------
SEMAPHORE_GOTIFY_ALERT   = data.get("SEMAPHORE_GOTIFY_ALERT",   "False")
SEMAPHORE_GOTIFY_URL     = data.get("SEMAPHORE_GOTIFY_URL",     "")
SEMAPHORE_GOTIFY_TOKEN   = data.get("SEMAPHORE_GOTIFY_TOKEN",   "")

SEMAPHORE_TELEGRAM_ALERT = data.get("SEMAPHORE_TELEGRAM_ALERT", "False")
SEMAPHORE_TELEGRAM_CHAT  = data.get("SEMAPHORE_TELEGRAM_CHAT",  "")
SEMAPHORE_TELEGRAM_TOKEN = data.get("SEMAPHORE_TELEGRAM_TOKEN", "")

# ------------------------------------------------------------
# 5. LDAP (unchanged â€“ still driven by ldap_domain)
# ------------------------------------------------------------
ldap_domain = data.get("ldap_domain", "")
agent.set_env("LDAP_DOMAIN", ldap_domain)
agent.bind_user_domains([ldap_domain] if ldap_domain else [])

SEMAPHORE_LDAP_ENABLE        = "True" if ldap_domain else "False"
SEMAPHORE_LDAP_BIND_DN       = os.getenv("LDAP_SEARCH_BIND_DN",      "")
SEMAPHORE_LDAP_BIND_PASSWORD = os.getenv("LDAP_SEARCH_BIND_PASSWORD", "")
SEMAPHORE_LDAP_SERVER        = os.getenv("LDAP_HOSTNAME",            "")
SEMAPHORE_LDAP_SEARCH_DN     = os.getenv("LDAP_USER_BASE_DN",        "")
SEMAPHORE_LDAP_SEARCH_FILTER = os.getenv("LDAP_USER_SEARCH_FILTER",  "")
SEMAPHORE_LDAP_NEEDTLS       = "False"

# ------------------------------------------------------------
# 6. Build the final env file for Semaphore
# ------------------------------------------------------------
app_env = {
    # Admin
    "SEMAPHORE_ADMIN_PASSWORD": SEMAPHORE_ADMIN_PASSWORD,
    "SEMAPHORE_ADMIN_NAME":     SEMAPHORE_ADMIN_NAME,
    "SEMAPHORE_ADMIN_EMAIL":    SEMAPHORE_ADMIN_EMAIL,
    "SEMAPHORE_ADMIN":          SEMAPHORE_ADMIN,

    # SMTP
    "SEMAPHORE_EMAIL_SENDER": MAIL_FROM_NAME,
    "SEMAPHORE_EMAIL_HOST":   smtp["host"],
    "SEMAPHORE_EMAIL_PORT":   str(smtp["port"]),
    "SEMAPHORE_EMAIL_USERNAME": smtp["username"],
    "SEMAPHORE_EMAIL_PASSWORD": smtp["password"],

    # Notifications
    "SEMAPHORE_GOTIFY_ALERT":   SEMAPHORE_GOTIFY_ALERT,
    "SEMAPHORE_GOTIFY_URL":     SEMAPHORE_GOTIFY_URL,
    "SEMAPHORE_GOTIFY_TOKEN":   SEMAPHORE_GOTIFY_TOKEN,
    "SEMAPHORE_TELEGRAM_ALERT": SEMAPHORE_TELEGRAM_ALERT,
    "SEMAPHORE_TELEGRAM_CHAT":  SEMAPHORE_TELEGRAM_CHAT,
    "SEMAPHORE_TELEGRAM_TOKEN": SEMAPHORE_TELEGRAM_TOKEN,

    # LDAP
    "SEMAPHORE_LDAP_ENABLE":        SEMAPHORE_LDAP_ENABLE,
    "SEMAPHORE_LDAP_BIND_DN":       SEMAPHORE_LDAP_BIND_DN,
    "SEMAPHORE_LDAP_BIND_PASSWORD": SEMAPHORE_LDAP_BIND_PASSWORD,
    "SEMAPHORE_LDAP_SERVER":        SEMAPHORE_LDAP_SERVER,
    "SEMAPHORE_LDAP_SEARCH_DN":     SEMAPHORE_LDAP_SEARCH_DN,
    "SEMAPHORE_LDAP_SEARCH_FILTER": SEMAPHORE_LDAP_SEARCH_FILTER,
    "SEMAPHORE_LDAP_NEEDTLS":       SEMAPHORE_LDAP_NEEDTLS,
    "SEMAPHORE_LDAP_MAPPING_DN":    "dn",
    "SEMAPHORE_LDAP_MAPPING_MAIL":  "mail",
    "SEMAPHORE_LDAP_MAPPING_UID":   "uid",
    "SEMAPHORE_LDAP_MAPPING_CN":    "cn",
}

agent.write_envfile("app.env", app_env)

# ------------------------------------------------------------
# 7. Echo back the whole configuration so the UI can reload it
# ------------------------------------------------------------
json.dump({
    "host":         host,
    "lets_encrypt": lets_encrypt,
    "http2https":   http2https,
    "ldap_domain":  ldap_domain,
    "domains_list": agent.list_user_domains(),   # used by combo-box
    "semaphore_admin":      SEMAPHORE_ADMIN,
    "semaphore_admin_name": SEMAPHORE_ADMIN_NAME,
    "semaphore_admin_email": SEMAPHORE_ADMIN_EMAIL,
}, sys.stdout)

agent.dump_env()