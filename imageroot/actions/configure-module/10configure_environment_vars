#!/usr/bin/env python3
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later

import json
import sys
import agent
import os
from agent.ldapproxy import Ldapproxy

# ------------------------------------------------
# 0. Parse JSON input
# ------------------------------------------------
data = json.load(sys.stdin)

# ------------------------------------------------
# 1. Core application settings
# ------------------------------------------------
SEMAPHORE_ADMIN_PASSWORD = data.get("SEMAPHORE_ADMIN_PASSWORD", "password")
SEMAPHORE_ADMIN_NAME     = data.get("SEMAPHORE_ADMIN_NAME",     "admin")
SEMAPHORE_ADMIN_EMAIL    = data.get("SEMAPHORE_ADMIN_EMAIL",    "admin@admin.com")
SEMAPHORE_ADMIN          = data.get("SEMAPHORE_ADMIN",          "admin")

# ------------------------------------------------
# 2. Reverse-proxy / TLS
# ------------------------------------------------
host         = data.get("host", "")
lets_encrypt = data.get("lets_encrypt", False)
http2https   = data.get("http2https",   True)

agent.set_env("TRAEFIK_HOST", host)
agent.set_env("TRAEFIK_LETS_ENCRYPT", "True" if lets_encrypt else "False")
agent.set_env("TRAEFIK_HTTP2HTTPS",   "True" if http2https   else "False")

# ------------------------------------------------
# 3. SMTP via SmartHost
# ------------------------------------------------
rdb  = agent.redis_connect(use_replica=True)
smtp = agent.get_smarthost_settings(rdb)

MAIL_FROM_NAME = f"SEMAPHORE <{smtp['username']}>"

# ------------------------------------------------
# 4. Optional notification channels
# ------------------------------------------------
SEMAPHORE_GOTIFY_ALERT   = data.get("SEMAPHORE_GOTIFY_ALERT",   "False")
SEMAPHORE_GOTIFY_URL     = data.get("SEMAPHORE_GOTIFY_URL",     "")
SEMAPHORE_GOTIFY_TOKEN   = data.get("SEMAPHORE_GOTIFY_TOKEN",   "")

SEMAPHORE_TELEGRAM_ALERT = data.get("SEMAPHORE_TELEGRAM_ALERT", "False")
SEMAPHORE_TELEGRAM_CHAT  = data.get("SEMAPHORE_TELEGRAM_CHAT",  "")
SEMAPHORE_TELEGRAM_TOKEN = data.get("SEMAPHORE_TELEGRAM_TOKEN", "")

# ------------------------------------------------
# 5. LDAP
# ------------------------------------------------
ldap_domain = data.get("ldap_domain", "")
agent.set_env("LDAP_DOMAIN", ldap_domain)

# unset stale LDAP env vars
for var in [
    "LDAP_HOSTNAME", "LDAP_PORT", "LDAP_SEARCH_BIND_DN",
    "LDAP_SEARCH_BIND_PASSWORD", "LDAP_USER_BASE_DN",
    "LDAP_MEMBER_ATTRIBUTE", "LDAP_MEMBER_ATTRIBUTE_TYPE",
    "LDAP_GROUP_BASE_DN", "LDAP_USERNAME_ATTRIBUTE",
    "LDAP_USER_SEARCH_FILTER", "LDAP_GROUP_SEARCH_FILTER"
]:
    agent.unset_env(var)

if ldap_domain:
    agent.bind_user_domains([ldap_domain])
    odom = Ldapproxy().get_domain(ldap_domain)
    base_dn = odom["base_dn"]

    agent.set_env("LDAP_HOSTNAME", odom["host"])
    agent.set_env("LDAP_PORT", str(odom["port"]))
    agent.set_env("LDAP_SEARCH_BIND_DN", odom["bind_dn"])
    agent.set_env("LDAP_SEARCH_BIND_PASSWORD", odom["bind_password"])

    if odom["schema"] == "rfc2307":
        agent.set_env("LDAP_USER_BASE_DN",  f"ou=People,{base_dn}")
        agent.set_env("LDAP_GROUP_BASE_DN", f"ou=Groups,{base_dn}")
        agent.set_env("LDAP_MEMBER_ATTRIBUTE", "memberUid")
        agent.set_env("LDAP_MEMBER_ATTRIBUTE_TYPE", "uid")

    elif odom["schema"] == "ad":
        agent.set_env("LDAP_USER_BASE_DN",  f"cn=Users,{base_dn}")
        agent.set_env("LDAP_GROUP_BASE_DN", f"cn=Users,{base_dn}")
        agent.set_env("LDAP_USERNAME_ATTRIBUTE", "samaccountname")
        agent.set_env("LDAP_USER_SEARCH_FILTER",
                      "(&(objectClass=top)(objectClass=user)(objectClass=person)(objectClass=organizationalPerson))")
        agent.set_env("LDAP_GROUP_SEARCH_FILTER",
                      "(&(objectClass=top)(objectClass=group))")
else:
    agent.bind_user_domains([])

# ------------------------------------------------
# 6. Build final env file
# ------------------------------------------------
app_env = {
    # Admin
    "SEMAPHORE_ADMIN_PASSWORD": SEMAPHORE_ADMIN_PASSWORD,
    "SEMAPHORE_ADMIN_NAME":     SEMAPHORE_ADMIN_NAME,
    "SEMAPHORE_ADMIN_EMAIL":    SEMAPHORE_ADMIN_EMAIL,
    "SEMAPHORE_ADMIN":          SEMAPHORE_ADMIN,

    # SMTP
    "SEMAPHORE_EMAIL_SENDER": MAIL_FROM_NAME,
    "SEMAPHORE_EMAIL_HOST":   smtp["host"],
    "SEMAPHORE_EMAIL_PORT":   str(smtp["port"]),
    "SEMAPHORE_EMAIL_USERNAME": smtp["username"],
    "SEMAPHORE_EMAIL_PASSWORD": smtp["password"],

    # Notifications
    "SEMAPHORE_GOTIFY_ALERT":   SEMAPHORE_GOTIFY_ALERT,
    "SEMAPHORE_GOTIFY_URL":     SEMAPHORE_GOTIFY_URL,
    "SEMAPHORE_GOTIFY_TOKEN":   SEMAPHORE_GOTIFY_TOKEN,
    "SEMAPHORE_TELEGRAM_ALERT": SEMAPHORE_TELEGRAM_ALERT,
    "SEMAPHORE_TELEGRAM_CHAT":  SEMAPHORE_TELEGRAM_CHAT,
    "SEMAPHORE_TELEGRAM_TOKEN": SEMAPHORE_TELEGRAM_TOKEN,

    # LDAP
    "SEMAPHORE_LDAP_ENABLE":        "True" if ldap_domain else "False",
    "SEMAPHORE_LDAP_BIND_DN":       os.getenv("LDAP_SEARCH_BIND_DN", ""),
    "SEMAPHORE_LDAP_BIND_PASSWORD": os.getenv("LDAP_SEARCH_BIND_PASSWORD", ""),
    "SEMAPHORE_LDAP_SERVER":        os.getenv("LDAP_HOSTNAME", ""),
    "SEMAPHORE_LDAP_SEARCH_DN":     os.getenv("LDAP_USER_BASE_DN", ""),
    "SEMAPHORE_LDAP_SEARCH_FILTER": os.getenv("LDAP_USER_SEARCH_FILTER", ""),
    "SEMAPHORE_LDAP_NEEDTLS":       "False",
    "SEMAPHORE_LDAP_MAPPING_DN":    "dn",
    "SEMAPHORE_LDAP_MAPPING_MAIL":  "mail",
    "SEMAPHORE_LDAP_MAPPING_UID":   "uid",
    "SEMAPHORE_LDAP_MAPPING_CN":    "cn",
}

agent.write_envfile("app.env", app_env)

# ------------------------------------------------
# 7. Echo back the configuration for the UI
# ------------------------------------------------
json.dump({
    "host":         host,
    "lets_encrypt": lets_encrypt,
    "http2https":   http2https,
    "ldap_domain":  ldap_domain,
    "domains_list": [{"name": d, "label": d, "value": d}
                     for d in Ldapproxy().get_domains_list()],
    "semaphore_admin":      SEMAPHORE_ADMIN,
    "semaphore_admin_name": SEMAPHORE_ADMIN_NAME,
    "semaphore_admin_email": SEMAPHORE_ADMIN_EMAIL,
}, sys.stdout)

agent.dump_env()